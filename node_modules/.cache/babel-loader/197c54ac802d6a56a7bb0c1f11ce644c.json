{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\"; // import Navigation from './Navbar';\n// import Home from './Home.js'\n// import Create from './Create.js'\n// import MyListedItems from './MyListedItems.js'\n// import MyPurchases from './MyPurchases.js'\n\nimport MarketplaceAbi from '../contractsData/Marketplace.json';\nimport MarketplaceAddress from '../contractsData/Marketplace-address.json';\nimport NFTAbi from '../contractsData/NFT.json';\nimport NFTAddress from '../contractsData/NFT-address.json';\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Spinner } from 'react-bootstrap';\nimport './App.css';\n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [account, setAccount] = useState(null);\n  const [nft, setNFT] = useState({});\n  const [marketplace, setMarketplace] = useState({}); // MetaMask Login/Connect\n\n  const web3Handler = async () => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    setAccount(accounts[0]); // Get provider from Metamask\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum); // Set signer\n\n    const signer = provider.getSigner();\n    window.ethereum.on('chainChanged', chainId => {\n      window.location.reload();\n    });\n    window.ethereum.on('accountsChanged', async function (accounts) {\n      setAccount(accounts[0]);\n      await web3Handler();\n    });\n    loadContracts(signer);\n  };\n\n  const loadContracts = async signer => {\n    // Get deployed copies of contracts\n    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\n    setMarketplace(marketplace);\n    const nft = new ethers.Contract(NFTAddress.address, NFTAbi.abi, signer);\n    setNFT(nft);\n    setLoading(false);\n  };\n}\n\n_s(App, \"X29np9vsVrEJxqb623/r0uMoOl8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["BrowserRouter","Routes","Route","MarketplaceAbi","MarketplaceAddress","NFTAbi","NFTAddress","useState","ethers","Spinner","App","loading","setLoading","account","setAccount","nft","setNFT","marketplace","setMarketplace","web3Handler","accounts","window","ethereum","request","method","provider","providers","Web3Provider","signer","getSigner","on","chainId","location","reload","loadContracts","Contract","address","abi"],"sources":["C:/Users/aosin/OneDrive/Desktop/Smart contract/NFT_MarketPlace/src/frontend/components/App.js"],"sourcesContent":["import {\r\n    BrowserRouter,\r\n    Routes,\r\n    Route\r\n} from \"react-router-dom\";\r\n// import Navigation from './Navbar';\r\n// import Home from './Home.js'\r\n// import Create from './Create.js'\r\n// import MyListedItems from './MyListedItems.js'\r\n// import MyPurchases from './MyPurchases.js'\r\nimport MarketplaceAbi from '../contractsData/Marketplace.json'\r\nimport MarketplaceAddress from '../contractsData/Marketplace-address.json'\r\nimport NFTAbi from '../contractsData/NFT.json'\r\nimport NFTAddress from '../contractsData/NFT-address.json'\r\nimport { useState } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState(true)\r\n  const [account, setAccount] = useState(null)\r\n  const [nft, setNFT] = useState({})\r\n  const [marketplace, setMarketplace] = useState({})\r\n\r\n  // MetaMask Login/Connect\r\n  const web3Handler = async () => {\r\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    setAccount(accounts[0])\r\n    // Get provider from Metamask\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n    // Set signer\r\n    const signer = provider.getSigner()\r\n\r\n    window.ethereum.on('chainChanged', (chainId) => {\r\n      window.location.reload();\r\n    })\r\n\r\n    window.ethereum.on('accountsChanged', async function (accounts) {\r\n      setAccount(accounts[0])\r\n      await web3Handler()\r\n    })\r\n    loadContracts(signer)\r\n  }\r\n  const loadContracts = async (signer) => {\r\n    // Get deployed copies of contracts\r\n    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer)\r\n    setMarketplace(marketplace)\r\n    const nft = new ethers.Contract(NFTAddress.address, NFTAbi.abi, signer)\r\n    setNFT(nft)\r\n    setLoading(false)\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SACIA,aADJ,EAEIC,MAFJ,EAGIC,KAHJ,QAIO,kBAJP,C,CAKA;AACA;AACA;AACA;AACA;;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,kBAAP,MAA+B,2CAA/B;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,EAAD,CAA9B;EACA,MAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C,CAJa,CAMb;;EACA,MAAMY,WAAW,GAAG,YAAY;IAC9B,MAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;MAAEC,MAAM,EAAE;IAAV,CAAxB,CAAvB;IACAV,UAAU,CAACM,QAAQ,CAAC,CAAD,CAAT,CAAV,CAF8B,CAG9B;;IACA,MAAMK,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACC,QAAzC,CAAjB,CAJ8B,CAK9B;;IACA,MAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;IAEAR,MAAM,CAACC,QAAP,CAAgBQ,EAAhB,CAAmB,cAAnB,EAAoCC,OAAD,IAAa;MAC9CV,MAAM,CAACW,QAAP,CAAgBC,MAAhB;IACD,CAFD;IAIAZ,MAAM,CAACC,QAAP,CAAgBQ,EAAhB,CAAmB,iBAAnB,EAAsC,gBAAgBV,QAAhB,EAA0B;MAC9DN,UAAU,CAACM,QAAQ,CAAC,CAAD,CAAT,CAAV;MACA,MAAMD,WAAW,EAAjB;IACD,CAHD;IAIAe,aAAa,CAACN,MAAD,CAAb;EACD,CAjBD;;EAkBA,MAAMM,aAAa,GAAG,MAAON,MAAP,IAAkB;IACtC;IACA,MAAMX,WAAW,GAAG,IAAIT,MAAM,CAAC2B,QAAX,CAAoB/B,kBAAkB,CAACgC,OAAvC,EAAgDjC,cAAc,CAACkC,GAA/D,EAAoET,MAApE,CAApB;IACAV,cAAc,CAACD,WAAD,CAAd;IACA,MAAMF,GAAG,GAAG,IAAIP,MAAM,CAAC2B,QAAX,CAAoB7B,UAAU,CAAC8B,OAA/B,EAAwC/B,MAAM,CAACgC,GAA/C,EAAoDT,MAApD,CAAZ;IACAZ,MAAM,CAACD,GAAD,CAAN;IACAH,UAAU,CAAC,KAAD,CAAV;EACD,CAPD;AAUD;;GAnCQF,G;;KAAAA,G;AAqCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}